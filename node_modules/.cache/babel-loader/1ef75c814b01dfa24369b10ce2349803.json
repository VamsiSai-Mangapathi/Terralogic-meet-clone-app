{"ast":null,"code":"import firepadRef from \"./firebase\";\nimport { store } from \"../index\";\nconst participantRef = firepadRef.child(\"participants\");\nexport const updatePreference = (userId, preference) => {\n  const currentParticipantRef = participantRef.child(userId).child(\"preferences\");\n  setTimeout(() => {\n    currentParticipantRef.update(preference);\n  });\n};\nexport const createOffer = async (peerConnection, receiverId, createdID) => {\n  const currentParticipantRef = participantRef.child(receiverId);\n\n  peerConnection.onicecandidate = event => {\n    event.candidate && currentParticipantRef.child(\"offerCandidates\").push({ ...event.candidate.toJSON(),\n      userId: createdID\n    });\n  };\n\n  const offerDescription = await peerConnection.createOffer();\n  await peerConnection.setLocalDescription(offerDescription);\n  const offer = {\n    sdp: offerDescription.sdp,\n    type: offerDescription.type,\n    userId: createdID\n  };\n  await currentParticipantRef.child(\"offers\").push().set({\n    offer\n  });\n};\nexport const initializeListensers = async userId => {\n  const currentUserRef = participantRef.child(userId);\n  currentUserRef.child(\"offers\").on(\"child_added\", async snapshot => {\n    const data = snapshot.val();\n\n    if (data === null || data === void 0 ? void 0 : data.offer) {\n      const pc = store.getState().participants[data.offer.userId].peerConnection;\n      await pc.setRemoteDescription(new RTCSessionDescription(data.offer));\n      await createAnswer(data.offer.userId, userId);\n    }\n  });\n  currentUserRef.child(\"offerCandidates\").on(\"child_added\", snapshot => {\n    const data = snapshot.val();\n\n    if (data.userId) {\n      const pc = store.getState().participants[data.userId].peerConnection;\n      pc.addIceCandidate(new RTCIceCandidate(data));\n    }\n  });\n  currentUserRef.child(\"answers\").on(\"child_added\", snapshot => {\n    const data = snapshot.val();\n\n    if (data === null || data === void 0 ? void 0 : data.answer) {\n      const pc = store.getState().participants[data.answer.userId].peerConnection;\n      const answerDescription = new RTCSessionDescription(data.answer);\n      pc.setRemoteDescription(answerDescription);\n    }\n  });\n  currentUserRef.child(\"answerCandidates\").on(\"child_added\", snapshot => {\n    const data = snapshot.val();\n\n    if (data.userId) {\n      const pc = store.getState().participants[data.userId].peerConnection;\n      pc.addIceCandidate(new RTCIceCandidate(data));\n    }\n  });\n};\n\nconst createAnswer = async (otherUserId, userId) => {\n  const pc = store.getState().participants[otherUserId].peerConnection;\n  const participantRef1 = participantRef.child(otherUserId);\n\n  pc.onicecandidate = event => {\n    event.candidate && participantRef1.child(\"answerCandidates\").push({ ...event.candidate.toJSON(),\n      userId: userId\n    });\n  };\n\n  const answerDescription = await pc.createAnswer();\n  await pc.setLocalDescription(answerDescription);\n  const answer = {\n    type: answerDescription.type,\n    sdp: answerDescription.sdp,\n    userId: userId\n  };\n  await participantRef1.child(\"answers\").push().set({\n    answer\n  });\n};","map":{"version":3,"sources":["C:/Users/Vamsisai-2994/REACT/google-meet-clone/src/server/peerConnection.js"],"names":["firepadRef","store","participantRef","child","updatePreference","userId","preference","currentParticipantRef","setTimeout","update","createOffer","peerConnection","receiverId","createdID","onicecandidate","event","candidate","push","toJSON","offerDescription","setLocalDescription","offer","sdp","type","set","initializeListensers","currentUserRef","on","snapshot","data","val","pc","getState","participants","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","answer","answerDescription","otherUserId","participantRef1"],"mappings":"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","sourcesContent":["import firepadRef from \"./firebase\";\r\nimport { store } from \"../index\";\r\n\r\nconst participantRef = firepadRef.child(\"participants\");\r\n\r\nexport const updatePreference = (userId, preference) => {\r\n  const currentParticipantRef = participantRef\r\n    .child(userId)\r\n    .child(\"preferences\");\r\n  setTimeout(() => {\r\n    currentParticipantRef.update(preference);\r\n  });\r\n};\r\n\r\nexport const createOffer = async (peerConnection, receiverId, createdID) => {\r\n  const currentParticipantRef = participantRef.child(receiverId);\r\n  peerConnection.onicecandidate = (event) => {\r\n    event.candidate &&\r\n      currentParticipantRef\r\n        .child(\"offerCandidates\")\r\n        .push({ ...event.candidate.toJSON(), userId: createdID });\r\n  };\r\n\r\n  const offerDescription = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offerDescription);\r\n\r\n  const offer = {\r\n    sdp: offerDescription.sdp,\r\n    type: offerDescription.type,\r\n    userId: createdID,\r\n  };\r\n\r\n  await currentParticipantRef.child(\"offers\").push().set({ offer });\r\n};\r\n\r\nexport const initializeListensers = async (userId) => {\r\n  const currentUserRef = participantRef.child(userId);\r\n\r\n  currentUserRef.child(\"offers\").on(\"child_added\", async (snapshot) => {\r\n    const data = snapshot.val();\r\n    if (data?.offer) {\r\n      const pc =\r\n        store.getState().participants[data.offer.userId].peerConnection;\r\n      await pc.setRemoteDescription(new RTCSessionDescription(data.offer));\r\n      await createAnswer(data.offer.userId, userId);\r\n    }\r\n  });\r\n\r\n  currentUserRef.child(\"offerCandidates\").on(\"child_added\", (snapshot) => {\r\n    const data = snapshot.val();\r\n    if (data.userId) {\r\n      const pc = store.getState().participants[data.userId].peerConnection;\r\n      pc.addIceCandidate(new RTCIceCandidate(data));\r\n    }\r\n  });\r\n\r\n  currentUserRef.child(\"answers\").on(\"child_added\", (snapshot) => {\r\n    const data = snapshot.val();\r\n    if (data?.answer) {\r\n      const pc =\r\n        store.getState().participants[data.answer.userId].peerConnection;\r\n      const answerDescription = new RTCSessionDescription(data.answer);\r\n      pc.setRemoteDescription(answerDescription);\r\n    }\r\n  });\r\n\r\n  currentUserRef.child(\"answerCandidates\").on(\"child_added\", (snapshot) => {\r\n    const data = snapshot.val();\r\n    if (data.userId) {\r\n      const pc = store.getState().participants[data.userId].peerConnection;\r\n      pc.addIceCandidate(new RTCIceCandidate(data));\r\n    }\r\n  });\r\n};\r\n\r\nconst createAnswer = async (otherUserId, userId) => {\r\n  const pc = store.getState().participants[otherUserId].peerConnection;\r\n  const participantRef1 = participantRef.child(otherUserId);\r\n  pc.onicecandidate = (event) => {\r\n    event.candidate &&\r\n      participantRef1\r\n        .child(\"answerCandidates\")\r\n        .push({ ...event.candidate.toJSON(), userId: userId });\r\n  };\r\n\r\n  const answerDescription = await pc.createAnswer();\r\n  await pc.setLocalDescription(answerDescription);\r\n\r\n  const answer = {\r\n    type: answerDescription.type,\r\n    sdp: answerDescription.sdp,\r\n    userId: userId,\r\n  };\r\n\r\n  await participantRef1.child(\"answers\").push().set({ answer });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}