{"ast":null,"code":"import { SET_MAIN_STREAM, ADD_PARTICIPANT, SET_USER, REMOVE_PARTICIPANT, UPDATE_USER, UPDATE_PARTICIPANT } from \"./actiontypes\";\nimport { createOffer, initializeListensers, updatePreference } from \"../server/peerConnection\";\nlet defaultUserState = {\n  mainStream: null,\n  participants: {},\n  currentUser: null\n};\nconst servers = {\n  iceServers: [{\n    urls: [\"stun:stun1.l.google.com:19302\", \"stun:stun2.l.google.com:19302\", \"stun:stun.l.google.com:19302\", \"stun:stun3.l.google.com:19302\", \"stun:stun4.l.google.com:19302\", \"stun:stun.services.mozilla.com\"]\n  }],\n  iceCandidatePoolSize: 10\n};\n\nconst generateColor = () => \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\nexport const userReducer = (state = defaultUserState, action) => {\n  if (action.type === SET_MAIN_STREAM) {\n    let payload = action.payload;\n    state = { ...state,\n      ...payload\n    };\n    return state;\n  } else if (action.type === ADD_PARTICIPANT) {\n    let payload = action.payload;\n    const currentUserId = Object.keys(state.currentUser)[0];\n    const newUserId = Object.keys(payload.newUser)[0];\n\n    if (state.mainStream && currentUserId !== newUserId) {\n      payload.newUser = addConnection(payload.newUser, state.currentUser, state.mainStream);\n    }\n\n    if (currentUserId === newUserId) payload.newUser[newUserId].currentUser = true;\n    payload.newUser[newUserId].avatarColor = generateColor();\n    let participants = { ...state.participants,\n      ...payload.newUser\n    };\n    state = { ...state,\n      participants\n    };\n    return state;\n  } else if (action.type === SET_USER) {\n    let payload = action.payload;\n    let participants = { ...state.participants\n    };\n    const userId = Object.keys(payload.currentUser)[0];\n    payload.currentUser[userId].avatarColor = generateColor();\n    initializeListensers(userId);\n    state = { ...state,\n      currentUser: { ...payload.currentUser\n      },\n      participants\n    };\n    return state;\n  } else if (action.type === REMOVE_PARTICIPANT) {\n    let payload = action.payload;\n    let participants = { ...state.participants\n    };\n    delete participants[payload.id];\n    state = { ...state,\n      participants\n    };\n    return state;\n  } else if (action.type === UPDATE_USER) {\n    let payload = action.payload;\n    const userId = Object.keys(state.currentUser)[0];\n    updatePreference(userId, payload.currentUser);\n    state.currentUser[userId] = { ...state.currentUser[userId],\n      ...payload.currentUser\n    };\n    state = { ...state,\n      currentUser: { ...state.currentUser\n      }\n    };\n    return state;\n  } else if (action.type === UPDATE_PARTICIPANT) {\n    let payload = action.payload;\n    const newUserId = Object.keys(payload.newUser)[0];\n    payload.newUser[newUserId] = { ...state.participants[newUserId],\n      ...payload.newUser[newUserId]\n    };\n    let participants = { ...state.participants,\n      ...payload.newUser\n    };\n    state = { ...state,\n      participants\n    };\n    return state;\n  }\n\n  return state;\n};\n\nconst addConnection = (newUser, currentUser, stream) => {\n  const peerConnection = new RTCPeerConnection(servers);\n  stream.getTracks().forEach(track => {\n    peerConnection.addTrack(track, stream);\n  });\n  const newUserId = Object.keys(newUser)[0];\n  const currentUserId = Object.keys(currentUser)[0];\n  const offerIds = [newUserId, currentUserId].sort((a, b) => a.localeCompare(b));\n  newUser[newUserId].peerConnection = peerConnection;\n  if (offerIds[0] !== currentUserId) createOffer(peerConnection, offerIds[0], offerIds[1]);\n  return newUser;\n};","map":{"version":3,"sources":["C:/Users/Vamsisai-2994/REACT/google-meet-clone/src/store/reducer.js"],"names":["SET_MAIN_STREAM","ADD_PARTICIPANT","SET_USER","REMOVE_PARTICIPANT","UPDATE_USER","UPDATE_PARTICIPANT","createOffer","initializeListensers","updatePreference","defaultUserState","mainStream","participants","currentUser","servers","iceServers","urls","iceCandidatePoolSize","generateColor","Math","floor","random","toString","userReducer","state","action","type","payload","currentUserId","Object","keys","newUserId","newUser","addConnection","avatarColor","userId","id","stream","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","offerIds","sort","a","b","localeCompare"],"mappings":"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","sourcesContent":["import {\r\n  SET_MAIN_STREAM,\r\n  ADD_PARTICIPANT,\r\n  SET_USER,\r\n  REMOVE_PARTICIPANT,\r\n  UPDATE_USER,\r\n  UPDATE_PARTICIPANT,\r\n} from \"./actiontypes\";\r\n\r\nimport {\r\n  createOffer,\r\n  initializeListensers,\r\n  updatePreference,\r\n} from \"../server/peerConnection\";\r\n\r\nlet defaultUserState = {\r\n  mainStream: null,\r\n  participants: {},\r\n  currentUser: null,\r\n};\r\n\r\nconst servers = {\r\n  iceServers: [\r\n    {\r\n      urls: [\r\n        \"stun:stun1.l.google.com:19302\",\r\n        \"stun:stun2.l.google.com:19302\",\r\n        \"stun:stun.l.google.com:19302\",\r\n        \"stun:stun3.l.google.com:19302\",\r\n        \"stun:stun4.l.google.com:19302\",\r\n        \"stun:stun.services.mozilla.com\",\r\n      ],\r\n    },\r\n  ],\r\n  iceCandidatePoolSize: 10,\r\n};\r\n\r\nconst generateColor = () =>\r\n  \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n\r\nexport const userReducer = (state = defaultUserState, action) => {\r\n  if (action.type === SET_MAIN_STREAM) {\r\n    let payload = action.payload;\r\n    state = { ...state, ...payload };\r\n    return state;\r\n  } else if (action.type === ADD_PARTICIPANT) {\r\n    let payload = action.payload;\r\n    const currentUserId = Object.keys(state.currentUser)[0];\r\n    const newUserId = Object.keys(payload.newUser)[0];\r\n    if (state.mainStream && currentUserId !== newUserId) {\r\n      payload.newUser = addConnection(\r\n        payload.newUser,\r\n        state.currentUser,\r\n        state.mainStream\r\n      );\r\n    }\r\n\r\n    if (currentUserId === newUserId)\r\n      payload.newUser[newUserId].currentUser = true;\r\n    payload.newUser[newUserId].avatarColor = generateColor();\r\n    let participants = { ...state.participants, ...payload.newUser };\r\n    state = { ...state, participants };\r\n    return state;\r\n  } else if (action.type === SET_USER) {\r\n    let payload = action.payload;\r\n    let participants = { ...state.participants };\r\n    const userId = Object.keys(payload.currentUser)[0];\r\n    payload.currentUser[userId].avatarColor = generateColor();\r\n    initializeListensers(userId);\r\n    state = { ...state, currentUser: { ...payload.currentUser }, participants };\r\n    return state;\r\n  } else if (action.type === REMOVE_PARTICIPANT) {\r\n    let payload = action.payload;\r\n    let participants = { ...state.participants };\r\n    delete participants[payload.id];\r\n    state = { ...state, participants };\r\n    return state;\r\n  } else if (action.type === UPDATE_USER) {\r\n    let payload = action.payload;\r\n    const userId = Object.keys(state.currentUser)[0];\r\n    updatePreference(userId, payload.currentUser);\r\n    state.currentUser[userId] = {\r\n      ...state.currentUser[userId],\r\n      ...payload.currentUser,\r\n    };\r\n    state = {\r\n      ...state,\r\n      currentUser: { ...state.currentUser },\r\n    };\r\n    return state;\r\n  } else if (action.type === UPDATE_PARTICIPANT) {\r\n    let payload = action.payload;\r\n    const newUserId = Object.keys(payload.newUser)[0];\r\n\r\n    payload.newUser[newUserId] = {\r\n      ...state.participants[newUserId],\r\n      ...payload.newUser[newUserId],\r\n    };\r\n    let participants = { ...state.participants, ...payload.newUser };\r\n    state = { ...state, participants };\r\n    return state;\r\n  }\r\n  return state;\r\n};\r\n\r\nconst addConnection = (newUser, currentUser, stream) => {\r\n  const peerConnection = new RTCPeerConnection(servers);\r\n  stream.getTracks().forEach((track) => {\r\n    peerConnection.addTrack(track, stream);\r\n  });\r\n  const newUserId = Object.keys(newUser)[0];\r\n  const currentUserId = Object.keys(currentUser)[0];\r\n\r\n  const offerIds = [newUserId, currentUserId].sort((a, b) =>\r\n    a.localeCompare(b)\r\n  );\r\n\r\n  newUser[newUserId].peerConnection = peerConnection;\r\n  if (offerIds[0] !== currentUserId)\r\n    createOffer(peerConnection, offerIds[0], offerIds[1]);\r\n  return newUser;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}