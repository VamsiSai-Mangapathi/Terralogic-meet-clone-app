{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vamsisai-2994\\\\REACT\\\\google-meet-clone\\\\src\\\\components\\\\MainScreen\\\\MainScreen.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport MeetingFooter from \"../MeetingFooter/MeetingFooter.component\";\nimport Participants from \"../Participants/Participants.component\";\nimport \"./MainScreen.css\";\nimport { connect } from \"react-redux\";\nimport { setMainStream, updateUser } from \"../../store/actioncreator\";\nimport Join from \"./../Kyathi/Join\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MainScreen = props => {\n  _s();\n\n  const participantRef = useRef(props.participants);\n\n  const onMicClick = micEnabled => {\n    if (props.stream) {\n      props.stream.getAudioTracks()[0].enabled = micEnabled;\n      props.updateUser({\n        audio: micEnabled\n      });\n    }\n  };\n\n  const onVideoClick = videoEnabled => {\n    if (props.stream) {\n      props.stream.getVideoTracks()[0].enabled = videoEnabled;\n      props.updateUser({\n        video: videoEnabled\n      });\n    }\n  };\n\n  useEffect(() => {\n    participantRef.current = props.participants;\n  }, [props.participants]);\n\n  const updateStream = stream => {\n    for (let key in participantRef.current) {\n      const sender = participantRef.current[key];\n      if (sender.currentUser) continue;\n      const peerConnection = sender.peerConnection.getSenders().find(s => s.track ? s.track.kind === \"video\" : false);\n      peerConnection.replaceTrack(stream.getVideoTracks()[0]);\n    }\n\n    props.setMainStream(stream);\n  };\n\n  const onScreenShareEnd = async () => {\n    const localStream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n    localStream.getVideoTracks()[0].enabled = Object.values(props.currentUser)[0].video;\n    updateStream(localStream);\n    props.updateUser({\n      screen: false\n    });\n  };\n\n  const onScreenClick = async () => {\n    let mediaStream;\n\n    if (navigator.getDisplayMedia) {\n      mediaStream = await navigator.getDisplayMedia({\n        video: true\n      });\n    } else if (navigator.mediaDevices.getDisplayMedia) {\n      mediaStream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n    } else {\n      mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          mediaSource: \"screen\"\n        }\n      });\n    }\n\n    mediaStream.getVideoTracks()[0].onended = onScreenShareEnd;\n    updateStream(mediaStream);\n    props.updateUser({\n      screen: true\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-screen\",\n      children: /*#__PURE__*/_jsxDEV(Participants, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(MeetingFooter, {\n        onScreenClick: onScreenClick,\n        onMicClick: onMicClick,\n        onVideoClick: onVideoClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainScreen, \"6dOHMWN2+PFAMCaxQOpNDriMpac=\");\n\n_c = MainScreen;\n\nconst mapStateToProps = state => {\n  return {\n    stream: state.mainStream,\n    participants: state.participants,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setMainStream: stream => dispatch(setMainStream(stream)),\n    updateUser: user => dispatch(updateUser(user))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen);\n\nvar _c;\n\n$RefreshReg$(_c, \"MainScreen\");","map":{"version":3,"sources":["C:/Users/Vamsisai-2994/REACT/google-meet-clone/src/components/MainScreen/MainScreen.component.js"],"names":["React","useRef","useEffect","useState","MeetingFooter","Participants","connect","setMainStream","updateUser","Join","MainScreen","props","participantRef","participants","onMicClick","micEnabled","stream","getAudioTracks","enabled","audio","onVideoClick","videoEnabled","getVideoTracks","video","current","updateStream","key","sender","currentUser","peerConnection","getSenders","find","s","track","kind","replaceTrack","onScreenShareEnd","localStream","navigator","mediaDevices","getUserMedia","Object","values","screen","onScreenClick","mediaStream","getDisplayMedia","mediaSource","onended","mapStateToProps","state","mainStream","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect,useState } from \"react\";\r\nimport MeetingFooter from \"../MeetingFooter/MeetingFooter.component\";\r\nimport Participants from \"../Participants/Participants.component\";\r\nimport \"./MainScreen.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMainStream, updateUser } from \"../../store/actioncreator\";\r\nimport Join from \"./../Kyathi/Join\";\r\nconst MainScreen = (props) => {\r\n  const participantRef = useRef(props.participants);\r\n\r\n  const onMicClick = (micEnabled) => {\r\n    if (props.stream) {\r\n      props.stream.getAudioTracks()[0].enabled = micEnabled;\r\n      props.updateUser({ audio: micEnabled });\r\n    }\r\n  };\r\n  const onVideoClick = (videoEnabled) => {\r\n    if (props.stream) {\r\n      props.stream.getVideoTracks()[0].enabled = videoEnabled;\r\n      props.updateUser({ video: videoEnabled });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    participantRef.current = props.participants;\r\n  }, [props.participants]);\r\n\r\n  const updateStream = (stream) => {\r\n    for (let key in participantRef.current) {\r\n      const sender = participantRef.current[key];\r\n      if (sender.currentUser) continue;\r\n      const peerConnection = sender.peerConnection\r\n        .getSenders()\r\n        .find((s) => (s.track ? s.track.kind === \"video\" : false));\r\n      peerConnection.replaceTrack(stream.getVideoTracks()[0]);\r\n    }\r\n    props.setMainStream(stream);\r\n  };\r\n\r\n  const onScreenShareEnd = async () => {\r\n    const localStream = await navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n      video: true,\r\n    });\r\n\r\n    localStream.getVideoTracks()[0].enabled = Object.values(\r\n      props.currentUser\r\n    )[0].video;\r\n\r\n    updateStream(localStream);\r\n\r\n    props.updateUser({ screen: false });\r\n  };\r\n\r\n  const onScreenClick = async () => {\r\n    let mediaStream;\r\n    if (navigator.getDisplayMedia) {\r\n      mediaStream = await navigator.getDisplayMedia({ video: true });\r\n    } else if (navigator.mediaDevices.getDisplayMedia) {\r\n      mediaStream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: true,\r\n      });\r\n    } else {\r\n      mediaStream = await navigator.mediaDevices.getUserMedia({\r\n        video: { mediaSource: \"screen\" },\r\n      });\r\n    }\r\n\r\n    mediaStream.getVideoTracks()[0].onended = onScreenShareEnd;\r\n\r\n    updateStream(mediaStream);\r\n\r\n    props.updateUser({ screen: true });\r\n  };\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"main-screen\">\r\n        <Participants />\r\n      </div>\r\n\r\n      <div className=\"footer\">\r\n        <MeetingFooter\r\n          onScreenClick={onScreenClick}\r\n          onMicClick={onMicClick}\r\n          onVideoClick={onVideoClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    stream: state.mainStream,\r\n    participants: state.participants,\r\n    currentUser: state.currentUser,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setMainStream: (stream) => dispatch(setMainStream(stream)),\r\n    updateUser: (user) => dispatch(updateUser(user)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen);\r\n"]},"metadata":{},"sourceType":"module"}